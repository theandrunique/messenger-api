volumes:
  scylla_data:
  elastic_data:

services:
  redis:
    image: redis
    ports:
      - 6379:6379

  mailhog:
    image: mailhog/mailhog
    ports:
      - 8025:8025

  scylla:
    image: scylladb/scylla
    ports:
      - 9042:9042
    volumes:
      - scylla_data:/var/lib/scylla
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'DESCRIBE keyspaces' || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  redisinsight:
    profiles: ["dashboards"]
    image: redislabs/redisinsight
    ports:
      - "5540:5540"

  app:
    container_name: app
    build:
      target: production
      context: .
      dockerfile: Dockerfile
    ports:
      - 8000:8000
    env_file:
      - .env.docker
    volumes:
      - ./keys:/app/keys
    depends_on:
      scylla:
        condition: service_healthy

  gateway:
    container_name: gateway
    image: theandru/messenger-api-gateway:v0.6.0
    ports:
      - 3030:3030
    environment:
      - PORT=3030
      - EVENT_BATCH_SIZE=100
      - REDIS_URL=redis://redis:6379
      - JWKS_URL=http://app:8000/.well-known/jwks.json
      - CORS_ORIGIN=http://localhost:5173,http://192.168.0.157:5173
      - CORS_METHODS=GET, POST
      - CORS_ALLOWED_HEADERS=Authorization
      - CORS_CREDENTIALS=true

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    ports:
      - 9000:9000
      - 9001:9001 # dashboard
    environment:
      MINIO_ROOT_USER: root
      MINIO_ROOT_PASSWORD: password

  elasticsearch:
    image: elasticsearch:8.17.3
    environment:
      - "ES_JAVA_OPTS=-Xms256m -Xmx512m"
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
    volumes:
      - elastic_data:/usr/share/elasticsearch/data

  kibana:
    image: kibana:8.17.3
    profiles: ["dashboards"]
    depends_on: ["elasticsearch"]
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - 5601:5601

  grafana:
    image: grafana/grafana:11.6.0
    profiles: ["monitoring"]
    environment:
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_BASIC_ENABLED: false
    ports:
      - 3000:3000
    volumes:
      - ./grafana/datasources.yaml:/etc/grafana/provisioning/datasources/ds.yaml

  prometheus:
    image: prom/prometheus:latest
    profiles: ["monitoring"]
    command: --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./grafana/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    profiles: ["monitoring"]
    volumes:
      - ./grafana/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      # - 8888:8888 # Prometheus metrics exposed by the Collector
      - "8889:8889" # Prometheus exporter metrics
      # - "4317:4317" # OTLP gRPC receiver

  loki:
    image: grafana/loki:3.2.0
    profiles: ["monitoring"]
    ports:
      []
      # - 3100:3100
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./grafana/loki-config.yaml:/etc/loki/local-config.yaml

  alloy:
    image: grafana/alloy:v1.8.1
    profiles: ["monitoring"]
    ports:
      - 12345:12345
    command: run --server.http.listen-addr=0.0.0.0:12345 /etc/alloy/config.alloy
    volumes:
      - ./grafana/config.alloy:/etc/alloy/config.alloy
      - /var/run/docker.sock:/var/run/docker.sock

  tempo:
    image: grafana/tempo:latest
    profiles: ["monitoring"]
    command: "-config.file=/etc/tempo.yaml"
    volumes:
      - ./grafana/tempo.yaml:/etc/tempo.yaml
    ports:
      []
      # - "14268:14268" # jaeger ingest
      # - "3200:3200" # tempo
      # - "9095:9095" # tempo grpc
      # - "4317:4317" # otlp grpc
      # - "4318:4318" # otlp http
      # - "9411:9411" # zipkin
